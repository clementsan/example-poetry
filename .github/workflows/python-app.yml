# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main", "dev"]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:

    # runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Run image
      uses: abatilo/actions-poetry@v2
      with:
          poetry-version: 1.2.2
    
    - name: Install dependencies
      run: poetry install

    - name: Create test data folders (Mac and linux)
      if: runner.os != 'Windows'
      run: |
        echo ${{ github.workspace }}
        mkdir -p ${{ github.workspace }}/testdata ${{ github.workspace }}/testdata_output
        echo "TESTINPUTPATH=${{ github.workspace }}/testdata" >> $GITHUB_ENV
        echo "TESTOUTPUTPATH=${{ github.workspace }}/testdata_output" >> $GITHUB_ENV

    - name: Create test data folders for Windows
      if: runner.os == 'Windows'
      run: |
        echo ${{ github.workspace }}
        mkdir -p ${{ github.workspace }}\testdata 
        mkdir -p ${{ github.workspace }}\testdata_output
        echo "TESTINPUTPATH=${{ github.workspace }}\testdata" >> $env:GITHUB_ENV
        echo "TESTOUTPUTPATH=${{ github.workspace }}\testdata_output" >> $env:GITHUB_ENV

    - name: Echo test data folders (Mac and linux)
      if: runner.os != 'Windows'
      run: |
        echo $TESTINPUTPATH
        echo $TESTOUTPUTPATH

    - name: Echo test data folders for Windows
      if: runner.os == 'Windows'
      run: |
        echo $env:TESTINPUTPATH
        echo $env:TESTOUTPUTPATH
    
    - name: Test with unittest
      run: |
        poetry run python -m unittest discover -s ./tests  -p 'test_*.py'
